#!/bin/bash

#
# configure --
#
# configure and generate the project script files 
#
#   - Generates a config header file for scripts the 
#     with various settings.
#   - Creates the actual script files from
#     the src/template.* files.
# 


CONFIG_HEADER="config"

function clean() { 
  rm -f 'build/*' >/dev/null
}


echo "#autogenerated config from configuration script" > $CONFIG_HEADER
echo " " > $CONFIG_HEADER.tmp
cat $CONFIG_HEADER.tmp $CONFIG_HEADER.defs > $CONFIG_HEADER

if [ -e $CONFIG_HEADER.tmp ]; then
  unlink $CONFIG_HEADER.tmp
fi 

rrep -qs -E '^RSYNC_BIN=.*$' "RSYNC_BIN=\"`which rsync`\"" $CONFIG_HEADER


printf "\nPRJSYNC_REMOTE_TARGET_PATH=\"/home/\$REMOTE_USERNAME/projects\"\n" >> $CONFIG_HEADER


#find src/ -type f -regex ".*template.*[^~]" -print | awk '{ print " cp " $1 " {$1##template}" "\n" }'
#

clean
if [ ! -d build ]; then
  mkdir build
fi 

cp src/template.project-sync-to-remotehost build/project-sync-to-remotehost
cp src/template.projectsync-project build/projectsync-project


#remove the config file include with the actual contents, so one less file
#is required for the compiled project to work.


echo "Replacing included configuration files with contents."

CONFIG_CONTENTS=`cat $CONFIG_HEADER | awk '{ gsub(/"/, "\\"") ; print }'`
rrep -qs -e "source \"../$CONFIG_HEADER\"" "$CONFIG_CONTENTS" build/project-sync-to-remotehost
rrep -qs -e "source \"../$CONFIG_HEADER\"" "$CONFIG_CONTENTS" build/projectsync-project


echo "Copy the files in build to your main project folder.  Then, create a symbolic link 
named 'project-sync-[project-directory-name]' that is linked to the script 'projectsync-project'. 
Now calling your symbolic link script will use rsync to synchronize the project folder to the target 
folder on the remote host.  Useful for having a backup copy  of a project, or copying it over to a host 
running apache (if it's a website)."


